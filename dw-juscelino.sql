-- MySQL Script generated by MySQL Workbench
-- Fri Oct 20 19:35:24 2023
-- Model: Sakila Full    Version: 2.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema  DW-BI
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema  DW-BI
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `DW-BI` ;
USE `DW-BI` ;

-- -----------------------------------------------------
-- Table `DW-BI`.`DIMENSAO_CLIENTE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DW-BI`.`DIMENSAO_CLIENTE` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nm_cliente` VARCHAR(100),
  `idade_cliente` INT,
  `sexo_cliente` CHAR(1),
  `endereco_cliente` VARCHAR(45),
  `cidade_cliente` VARCHAR(45),
  `cpf_cliente` VARCHAR(12),
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DW-BI`.`DIMENSAO_FILME`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DW-BI`.`DIMENSAO_FILME` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome_filme` VARCHAR(45) ,
  `genero_filme` VARCHAR(45) ,
  `vl_filme` DECIMAL(3,2) ,
  `ator_principal` VARCHAR(45) ,
  `idioma` VARCHAR(20),
  `ano_lancamento` INT,
  `duracao_filme` TIME ,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DW-BI`.`DIMENSAO_PAGAMENTO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DW-BI`.`DIMENSAO_PAGAMENTO` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `data_pagamento` DATETIME,
  `met_pagamento` VARCHAR(15),
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DW-BI`.`DIMENSAO_TEMPO_LOCACAO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DW-BI`.`DIMENSAO_TEMPO_LOCACAO` (
  `data_referencia`  date PRIMARY KEY ,
  `dias_semana` VARCHAR(20),
  `nm_meses` VARCHAR(15),
  `ano` INT,
  `trimestre` INT,
  `feriado` BOOLEAN
);
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DW-BI`.`FATO_LOCACAO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DW-BI`.`FATO_LOCACAO` (
  `id_locacao` INT NOT NULL AUTO_INCREMENT,
  `qt_filme` INT NULL,
  `vl_locacao` BOOLEAN NULL,
  `data_locacao` DATE,
  `DIMENSAO_CLIENTE_id` INT NOT NULL,
  `DIMENSAO_FILME_id` INT NOT NULL,
  `PAGAMENTO_id` INT NOT NULL,
  `DIMENSAO_TEMPO_LOCACAO_data_refencia` date NOT NULL,
  PRIMARY KEY (`id_locacao`, `DIMENSAO_CLIENTE_id`, `DIMENSAO_FILME_id`, `PAGAMENTO_id`, `DIMENSAO_TEMPO_LOCACAO_data_refencia`),
  INDEX `fk_FATO_LOCACAO_DIMENSAO_CLIENTE1_idx` (`DIMENSAO_CLIENTE_id` ASC),
  INDEX `fk_FATO_LOCACAO_DIMENSAO_FILME1_idx` (`DIMENSAO_FILME_id` ASC),
  INDEX `fk_FATO_LOCACAO_PAGAMENTO1_idx` (`PAGAMENTO_id` ASC),
  INDEX `fk_FATO_LOCACAO_DIMENSAO_TEMPO_LOCACAO1_idx` (`DIMENSAO_TEMPO_LOCACAO_data_refencia` ASC),
  CONSTRAINT `fk_FATO_LOCACAO_DIMENSAO_CLIENTE1`
    FOREIGN KEY (`DIMENSAO_CLIENTE_id`)
    REFERENCES `DW-BI`.`DIMENSAO_CLIENTE` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FATO_LOCACAO_DIMENSAO_FILME1`
    FOREIGN KEY (`DIMENSAO_FILME_id`)
    REFERENCES `DW-BI`.`DIMENSAO_FILME` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FATO_LOCACAO_PAGAMENTO1`
    FOREIGN KEY (`PAGAMENTO_id`)
    REFERENCES `DW-BI`.`DIMENSAO_PAGAMENTO` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FATO_LOCACAO_DIMENSAO_TEMPO_LOCACAO1`
    FOREIGN KEY (`DIMENSAO_TEMPO_LOCACAO_data_refencia`)
    REFERENCES `DW-BI`.`DIMENSAO_TEMPO_LOCACAO` (`data_referencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `DW-BI`;

DELIMITER $$
USE `DW-BI`$$

CREATE TRIGGER `ins_film` AFTER INSERT ON `film` FOR EACH ROW BEGIN
    INSERT INTO film_text (film_id, title, description)
        VALUES (new.film_id, new.title, new.description);
  END$$

USE `DW-BI`$$

CREATE TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN
    IF (old.title != new.title) or (old.description != new.description)
    THEN
        UPDATE film_text
            SET title=new.title,
                description=new.description,
                film_id=new.film_id
        WHERE film_id=old.film_id;
    END IF;
  END$$

USE `DW-BI`$$

CREATE TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN
    DELETE FROM film_text WHERE film_id = old.film_id;
  END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
